#!/bin/bash

function checkOperationValid(){
    # NAME
    #   checkOperationValid - check if argument is a valid operation
    # SYNOPSIS
    #   checkOperationValid OPERATION
    # DESCRIPTION
    #   Exits script if no argument, or an invalid operation is called as an argument.

    if [ "$1" == "" ]
    then
        echo "ERROR: Missing Arguments. Use dims, transpose, mean, add, or multiply" >&2
        exit 1
    elif [ "$1" != "dims" ] && [ "$1" != "transpose" ] && [ "$1" != "mean" ] && [ "$1" != "add" ] && [ "$1" != "multiply" ]
    then
        echo "ERROR: '$1' is not a valid operation." >&2
        exit 2
    fi
}

function getMatrix(){
    # NAME
    #   getMatrix - gets and sets Matrix from a file. If the operation is
    #   dims, transpose, or mean, the function also check stdin.
    #   USES GLOBAL VARIABLES MATRIX1 and MATRIX2
    # SYNOPSIS
    #   getMatrix OPERATION NUMBER_OF_ARGUMENTS MATRIX1 MATRIX2
    # DESCRIPTION
    #   Exits script if there in an invalid number of many arguments.

    if [ "$1" == "dims" ] || [ "$1" == "transpose" ] || [ "$1" == "Mean" ]
    then
        if [ "$2" = "1" ]
        then
            # echo "Piping into $MATRIX1..." #DEBUGGING
            mkdir -p temp
            cat > "$MATRIX1"
        elif [ "$2" = "2" ]
        then
            # echo "Setting MATRIX1 to $3..." #DEBUGGING
            MATRIX1="$3"
        else
            echo "ERROR: Argument Miscount. Usage: 'matrix $1 [MATRIX]'" >&2
            exit 3
        fi
    elif [ "$1" == "add" ] || [ "$1" == "multiply" ]
    then
        if [ "$2" = "3" ]
        then
            # echo "Setting MATRIX1 to $3...." #DEBUGGING
            MATRIX1=$3
            # echo "Setting MATRIX2 to $4...." #DEBUGGING
            MATRIX2=$4
        else
            echo "ERROR: Argument Miscount. Usage: 'matrix' $1 MATRIX_LEFT MATRIX_RIGHT." >&2
            exit 3
        fi
    fi
}

function _checkFile(){
    # NAME
    #   _checkFile - checks if matrix file is usable
    # SYNOPSIS
    #   _checkFile MATRIX
    # DESCRIPTION
    #   Exits script if file is nonexistant, unreadable, or empty.

    if [ ! -e "$1" ]    # Check if file exists
    then
        echo "ERROR: File '$1' does not exist." >&2
        exit 4
    elif [ ! -r "$1" ]  # Check if file is readable
    then
        echo "ERROR: File '$1' is not readable." >&2
        exit 5
    elif [ ! -s "$1" ]  # Check if file is empty
    then
        echo "ERROR: File '$1' is empty." >&2
        exit 6
    fi
}

function _checkEmpty(){
    # NAME
    #   _checkEmpty - check if arugment is empty
    # SYNOPSIS
    #   _checkFile INPUT
    # DESCRIPTION
    #   Exits script if input is empty

    if [ "$1" == "" ]
    then
        echo "ERROR: Matrix Invalid. Empty line detected." >&2
        exit 7
    fi
}

function _checkInteger(){
    #TO USE
    local intPattern='^-?[0-9]+$'
    if ! [[ $1 =~ $intPattern ]]
    then
        echo "ERROR: Matrix Invalid. Non-integer '$1' detected." >&2
        exit 8
    fi
}

function _checkMatrix(){
    #TODO
    while read line
    do
        _checkEmpty "$line"     # check if line is empty

    done < "$1"
}

function checkMatrixFile(){
    # NAME
    #   _checkMatrixFile - checks if matrix files used as arguments are both
    #   usable, and have valid matrices within them.
    # SYNOPSIS
    #   _checkMatrixFile OPERATION MATRIX1 MATRIX2
    # DESCRIPTION
    #   Exits if there any problems with matrix files
    if [ "$1" == "dims" ] || [ "$1" == "transpose" ] || [ "$1" == "Mean" ]
    then
        _checkFile "$2"
        _checkMatrix "$2"
    elif [ "$1" == "add" ] || [ "$1" == "multiply" ]
    then
        _checkFile "$2"
        _checkMatrix "$2"
        _checkFile "$3"
        _checkMatrix "$3"
    fi
}

function clearTemp(){
    # Empty and Delete the Temp Folder
    echo "TODO"
}

function dims(){
    local numCols=0
    local numRows=0

    while read line
    do
        if [ "$numCols" -eq "0" ]
        then
            for item in $line
            do
                (( numCols++ ))
            done
        fi

        (( numRows++ ))
    done < "$1"

    echo "$numRows $numCols"
    exit 0
}

function transpose(){
    echo "TODO"
}

function mean(){
    echo "TODO"
}

function add(){
    echo "TODO"
}

function multiply(){
    echo "TODO"
}

function action(){
    if [ "$1" == "dims" ]
    then
        dims "$2"
    elif [ "$1" == "transpose" ]
    then
        transpose "$2"
    elif [ "$1" == "mean" ]
    then
        mean "$2"
    elif [ "$1" == "add" ]
    then
        add "$2" "$3"
    elif [ "$1" == "multiply" ]
    then
        mean "$2" "$3"
    fi
}

NUMARG=$#                           # Number of Arguments
OPERATION=$1                        # Operation Called
MATRIX1="./temp/tempMatrix1_$$"     # Location of Matrix 1
MATRIX2="./temp/tempMatrix2_$$"     # Location of Matrix 2

checkOperationValid "$OPERATION"                    # Check for Valid Operations.
getMatrix "$OPERATION" "$NUMARG" "$2" "$3"          # Get Matrices / Check Number of Arguments
checkMatrixFile "$OPERATION" "$MATRIX1" "$MATRIX2"  # Check Matrix Validity

action "$OPERATION" "$MATRIX1" "$MATRIX2"           # Do Action based on Operation